#!/usr/bin/env bash
set -eu -o pipefail
# Install Linux on kvm via CLI
#
# - Create a small Copy on Write (COW) file backed by the linux qcow2 image.
# - The backing linux image is readonly and will never be modified.

# - [Run Amazon Linux 2 as a virtual machine on premises (docs.aws.amazon.com)](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-2-virtual-machine.html#amazon-linux-2-virtual-machine-download)
# - [QEMU  KVM Using the Copy-On-Write mode (www.unixmen.com)](https://www.unixmen.com/qemu-kvm-using-copy-write-mode/)

export SLF_DIR="$(readlink -f "$(dirname -- "${BASH_SOURCE[0]:-${0:A}}")/../")"
cd "$SLF_DIR"

# : ${LIBVIRT_IMAGES_DIR:=${HOME}/.local/share/libvirt/images/}
: ${LIBVIRT_IMAGES_DIR:=/var/lib/libvirt/images}
[[ -d $LIBVIRT_IMAGES_DIR ]] || mkdir -p "$LIBVIRT_IMAGES_DIR"

function usage() {
  echo >&2 "Usage: $0 GUEST_NAME [GUEST_TYPE] # amzn2, fedora, rocky, ha, etc"
}

GUEST_NAME="${1:-}"
[[ -z $GUEST_NAME ]] && usage && exit 1

GUEST_TYPE=${2:-amzn2}

OS_VARIANT="rhel7.0" # update below for images
DISK_SIZE=${DISK_SIZE:-32G}
RAM=4096

case $GUEST_TYPE in
  al2 | amzn2 | a)
    # TODO: Find latest from https://cdn.amazonlinux.com/os-images/latest/
    IMAGE_URL='https://cdn.amazonlinux.com/os-images/2.0.20231101.0/kvm/amzn2-kvm-2.0.20231101.0-x86_64.xfs.gpt.qcow2'
    IMAGE_DISPLAY_NAME="Amazon Linux 2"
    SHASUMS_URL="https://cdn.amazonlinux.com/os-images/2.0.20231101.0/kvm/SHA256SUMS"
    ;;
  al2023)
    # TODO: Find latest from https://cdn.amazonlinux.com/os-images/latest/
    IMAGE_URL='https://cdn.amazonlinux.com/al2023/os-images/2023.2.20231113.0/kvm/al2023-kvm-2023.2.20231113.0-kernel-6.1-x86_64.xfs.gpt.qcow2'
    IMAGE_DISPLAY_NAME="Amazon Linux 2023"
    SHASUMS_URL="https://cdn.amazonlinux.com/al2023/os-images/2023.2.20231113.0/kvm/SHA256SUMS"
    ;;
  debian-12 | debian | d )
    # TODO: Find latest from https://cdn.amazonlinux.com/os-images/latest/
    IMAGE_URL='https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-genericcloud-amd64.qcow2'
    IMAGE_DISPLAY_NAME="Debian 12"
    SHASUMS_URL="https://cloud.debian.org/images/cloud/bookworm/latest/SHA512SUMS"
    ;;
  fedora-39 | fedora39 | f39 | fedora | f)
    IMAGE_URL='https://download.fedoraproject.org/pub/fedora/linux/releases/39/Cloud/x86_64/images/Fedora-Cloud-Base-39-1.5.x86_64.qcow2'
    IMAGE_DISPLAY_NAME="Fedora Cloud 39"
    # SHASUMS_URL="https://download.fedoraproject.org/pub/fedora/linux/releases/39/Cloud/x86_64/images/Fedora-Cloud-39-1.5-x86_64-CHECKSUM"
    ;;
  fedora-38 | fedora38 | f38 | fedora | f)
    IMAGE_URL='https://download.fedoraproject.org/pub/fedora/linux/releases/38/Cloud/x86_64/images/Fedora-Cloud-Base-38-1.6.x86_64.qcow2'
    IMAGE_DISPLAY_NAME="Fedora Cloud 38"
    ;;
  rocky-9 | rocky9 | r9 | r | rocky)
    IMAGE_URL='https://download.rockylinux.org/pub/rocky/9.0/images/x86_64/Rocky-9-GenericCloud.latest.x86_64.qcow2'
    IMAGE_DISPLAY_NAME="Rocky Linux 9"
    ;;
  rocky-8 | rocky8 | r8)
    IMAGE_URL='https://dl.rockylinux.org/pub/rocky/8.6/images/Rocky-8-GenericCloud.latest.x86_64.qcow2'
    IMAGE_DISPLAY_NAME="Rocky Linux 8"
    ;;
  # ha)
  #   IMAGE_URL='https://github.com/home-assistant/operating-system/releases/download/9.4/haos_ova-9.4.qcow2.xz'
  #   ;;
  # XXX It's not liking our config/meta-data
  # ubuntu-22.04 | ubuntu)
  #   IMAGE_URL='https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64-disk-kvm.img'
  # ubuntu-20.04 | ubuntu)
  #  IMAGE_URL='https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64-disk-kvm.img'
  #  ;;
  *)
    echo "Unknown image: $GUEST_TYPE"
    exit 1
    ;;
esac

function command_exists() {
    # check if command exists and fail otherwise
    local exit_code=0
    if ! type "$1" &>/dev/null; then
      echo "$1 could not be found."
      exit_code=1
    fi
    return $exit_code
}

function check_deps() {
  for COMMAND in \
    genisoimage \
    qemu-img \
    virsh \
    virt-install
  do
    command_exists "${COMMAND}"
  done
}

check_deps

# Set to default if unset
IMAGE_FILENAME="$(basename "$IMAGE_URL")"

# Update hostname in `meta-data` file
sed "s/CHANGEME/$GUEST_NAME/" config/meta-data-template > config/meta-data

SEED_ISO_FILENAME="${LIBVIRT_IMAGES_DIR}/seed-${GUEST_NAME}.iso"

# Create seed.iso boot image (cloud-init and user-data)
genisoimage                      \
  -output "${SEED_ISO_FILENAME}" \
  -volid cidata                  \
  -joliet                        \
  -rock                          \
  config/user-data               \
  config/meta-data


function download_and_verify_image() {
  # Download the image
  wget --no-clobber "$IMAGE_URL"
  chmod a-w "$(basename "$IMAGE_URL")"

  # Download and verify checksums if URL is provided
  if [[ -n "${SHASUMS_URL:-}" ]]; then
    wget --no-clobber "$SHASUMS_URL"

    # Extract filename from SHASUMS_URL
    local shasums_filename=$(basename "$SHASUMS_URL")

    # Determine if the checksums are SHA256 or SHA512 based on the filename
    if [[ "$shasums_filename" == *256* ]]; then
      sha256sum --check --ignore-missing "$shasums_filename"
    elif [[ "$shasums_filename" == *512* ]]; then
      sha512sum --check --ignore-missing "$shasums_filename"
    else
      echo "Unknown checksum type."
      return 1
    fi
  fi
}

cd "$LIBVIRT_IMAGES_DIR"
download_and_verify_image # ADDED: Function call to download and verify
cd -

# Delete existing kvm guest with same name
virsh destroy "${GUEST_NAME}" || :
virsh undefine "${GUEST_NAME}" || :

cd "$LIBVIRT_IMAGES_DIR"
# Create a layer backed back the amazon linux image
qemu-img create           \
    -f qcow2              \
    -b "$IMAGE_FILENAME"  \
    -F qcow2              \
    "${GUEST_NAME}.qcow2" \
    "$DISK_SIZE"

# Print defaults about newly created image
qemu-img info --backing-chain "${GUEST_NAME}.qcow2"
cd -

# Create a KVM guest based on the image and cloud-init config
virt-install                                                           \
  --console pty,target_type=serial                                     \
  --description "${IMAGE_DISPLAY_NAME} Copy on Write (COW)"            \
  --disk path="${LIBVIRT_IMAGES_DIR}/${GUEST_NAME}.qcow2",bus=virtio \
  --disk path="${SEED_ISO_FILENAME}",device=cdrom                      \
  --import                                                             \
  --name "${GUEST_NAME}"                                               \
  --network bridge:virbr0,model=virtio                                 \
  --os-variant=${OS_VARIANT}                                           \
  --ram="$RAM"                                                           \
  --vcpus=2                                                            \
  --noautoconsole

## Connect
[[ -t 1 ]] && virsh console "${GUEST_NAME}"

# Print networking info
#
# virsh net-dhcp-leases default
#  Expiry Time           MAC address         Protocol   IP address           Hostname   Client ID or DUID
# ------------------------------------------------------------------------------------------------------------------------------------------------
# 2020-09-12 14:50:17   52:54:00:e5:0e:65   ipv4       192.168.122.103/24   hal9000
#
# ssh ec2-user@192.168.122.103

# TODO Verify downloaded image using signed checksums
#
# amazon-linux-2
#
# wget https://cdn.amazonlinux.com/os-images/2.0.20190612/kvm/SHA256SUMS
# wget https://cdn.amazonlinux.com/os-images/2.0.20190612/kvm/SHA256SUMS.gpg
# sha256sum --check SHA256SUMS
# gpg --verify SHA256SUMS.gpg SHA256SUMS
#
# Verify downloaded image using signed checksums
# https://alt.fedoraproject.org/en/verify.html
#
# fedora
#
# curl https://getfedora.org/static/fedora.gpg | gpg --import
# wget https://getfedora.org/static/checksums/36/images/Fedora-Cloud-36-1.5-x86_64-CHECKSUM
# gpg --verify-files *-CHECKSUM
# sha256sum -c *-CHECKSUM
